version: 2
references:
  workspace_root: &workspace_root
    /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

workflows:
  version: 2
  build-release:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - create-package:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - bintray-upload:
          requires:
            - create-package
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/


jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8u141-browsers
      #- image: selenium/standalone-chrome:3.1.0
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m



    steps:
      - checkout

      - run:
          name: Install Firfox
          command: |
            curl -fL https://getcli.jfrog.io | sudo -E bash -
#            curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -
#            sudo apt-get install -y nodejs
#            sudo npm install -g jfrog-cli-go
            jfrog bt
            firefox -v | more
            which firefox


#      - restore_cache:
#                keys:
#                - v1-dependencies-{{ checksum "pom.xml" }}
#                # fallback to using the latest cache if no exact match is found
#                - v1-dependencies-
#
#      - run: mvn dependency:go-offline
#      # Download and cache dependencies
#      - restore_cache:
#          keys:
#          - v1-dependencies-{{ checksum "pom.xml" }}
#          # fallback to using the latest cache if no exact match is found
#          - v1-dependencies-
#      - run:
#          name: Install latest version of ChromeDriver Sample
#          command: |
#            sudo wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
#            sudo sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
#            sudo apt-get update
#            sudo apt-get install google-chrome-unstable
#           command google-chrome --version




      - run:
          name: chrome version
          command: |
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
            sudo apt-get update
            sudo apt-get install google-chrome-stable
            google-chrome --version


      - run:
          name: Install latest version of ChromeDriver
          command: |
            sudo wget https://chromedriver.storage.googleapis.com/LATEST_RELEASE
            lastVersion=$(cat LATEST_RELEASE)
            sudo wget "https://chromedriver.storage.googleapis.com/$url${lastVersion}/chromedriver_linux64.zip"
            sudo unzip chromedriver_linux64.zip
            sudo rm chromedriver_linux64.zip
            sudo mv chromedriver /usr/bin/
            sudo chmod 777 /usr/bin/chromedriver
            sudo apt-get install libxi6 libgconf-2-4
            sudo apt-get -y install xvfb gtk2-engines-pixbuf
            sudo apt-get -y install xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable
            sudo apt-get install xvfb
            sudo apt-get -y install imagemagick x11-apps

      - run:
          name: Install gecko driver
          command: |
            sudo wget https://github.com/mozilla/geckodriver/releases/download/v0.17.0/geckodriver-v0.17.0-linux64.tar.gz
            sudo tar -xvzf geckodriver*
            sudo chmod +x geckodriver
            sudo mv geckodriver /usr/bin/

      - run:
          name: Install fluxbox
          command: sudo apt-get install fluxbox

      - run:
          name: start xvfb
          command: |
            export DISPLAY=:99
            Xvfb :99 -ac -screen 1 1024x768x24 & fluxbox &
          background: true

      - run:
          name: Install phantomJS
          command: |
            wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2
            bzip2 -d phantomjs-2.1.1-linux-x86_64.tar.bz2
            tar -xvf phantomjs-2.1.1-linux-x86_64.tar
            sudo cp phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/bin/phantomjs
            phantomjs -v

      - run: mvn install -DskipTests=true -DfailIfNoTests=false

      - run:
          name: UI Tests
          command: mvn test -Dwebdriver.chrome.driver=/usr/bin/chromedriver -Dwebdriver.gecko.driver=/usr/bin/geckodriver

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}


      - run:
          name: Save test results
          command: |
             mkdir -p ~/junit/
             find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit
      # run tests!
      #- run: mvn integration-test
# sudo chmod +x ~/repo/maui-framework/handle-mvn-release.sh


# for tags
      - run:
          command: |
            touch ~/repo/junit-tests/target/mvnrelease.out
            touch ~/repo/junit-tests/target/circleTag.out
            echo $CIRCLE_TAG > ~/repo/junit-tests/target/circleTag.out
            export MAVEN_RELEASE_VERSION="$(echo $CIRCLE_TAG | cut -c 2-)"
            echo $MAVEN_RELEASE_VERSION > ~/repo/junit-tests/target/mvnrelease.out
#            curl -fL https://getcli.jfrog.io | sh
#            cd ~/repo/maui-framework/
#            mvn -B -Dtag=0.0.1 release:prepare -DreleaseVersion=0.0.1 -DdevelopmentVersion=0.0.1-Snapshot
#            mvn -B -s settings.xml release:perform

      - store_artifacts:
                path: ~/repo/junit-tests/target

  create-package:
    docker:
          # specify the version you desire here
          - image: circleci/openjdk:8u141-browsers

    working_directory: ~/repo

    steps:
      - checkout
#      - run:
#          command: |
#            touch ~/repo/maui-framework/target/mvnrelease.out
#            touch ~/repo/maui-framework/target/circleTag.out
#            echo $CIRCLE_TAG > ~/repo/maui-framework/target/circleTag.out
#            export MAVEN_RELEASE_VERSION="$(echo $CIRCLE_TAG | cut -c 2-)"
#            echo $MAVEN_RELEASE_VERSION > ~/repo/maui-framework/target/mvnrelease.out

      - run:
          name: Updating Maui-Framework version as per tag
          command: |
            export MAVEN_RELEASE_VERSION="$(echo $CIRCLE_TAG | cut -c 2-)"
            mvn versions:set -DnewVersion=$MAVEN_RELEASE_VERSION -f maui-framework/pom.xml
            mvn versions:commit

      - run:
          name: Building packages
          command: |
            mvn clean package -DskipTests=true
            mkdir ~/repo/maui-framework/releasePackage
            mkdir -p /tmp/workspace/release/jars
            mv ~/repo/maui-framework/target/*.jar /tmp/workspace/release/jars/

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - release/jars/

      - run:
          name: Setting new development version as per tag
          command: |
            export MAVEN_RELEASE_VERSION="$(echo $CIRCLE_TAG | cut -c 2-)"
            export MAVEN_SNAPSHOT='-SNAPSHOT'
            export DEVELOPMENT_VERSION="$MAVEN_RELEASE_VERSION$MAVEN_SNAPSHOT"
            touch ~/repo/maui-framework/target/devTag.out
                        echo $DEVELOPMENT_VERSION > ~/repo/maui-framework/target/devTag.out
            mvn versions:set -DnewVersion=$DEVELOPMENT_VERSION -f maui-framework/pom.xml
            mvn versions:commit

#      - run:
#          command: |
#            touch ~/repo/maui-framework/target/mvnrelease.out
#            touch ~/repo/maui-framework/target/circleTag.out
#            echo $CIRCLE_TAG > ~/repo/maui-framework/target/circleTag.out
#            export MAVEN_RELEASE_VERSION="$(echo $CIRCLE_TAG | cut -c 2-)"
#            echo $MAVEN_RELEASE_VERSION > ~/repo/maui-framework/target/mvnrelease.out

      - store_artifacts:
          path: ~/repo/maui-framework/target

          #update version of maui-framework
  #mvn versions:set -DnewVersion=2.1.0-SNAPSHOT -f maui-framework/pom.xml
  bintray-upload:
    docker:
            # specify the version you desire here
      - image: circleci/openjdk:8u141-browsers

    working_directory: ~/repo

    steps:
      - *attach_workspace

      - run:
          name: install Bintray CLI
          command: |
            curl -fL https://getcli.jfrog.io | sh

      - run:
          name: upload artifacts to bintray
          command: |
            export MAVEN_RELEASE_VERSION="$(echo $CIRCLE_TAG | cut -c 2-)"
            export MAUI_URL='testmonkeys/maven/maui/'
            export BINTRAY_URL="$MAUI_URL$MAVEN_RELEASE_VERSION"
            jfrog bt u "/tmp/workspace/release/jars/*" $BINTRAY_URL --user=$BINTRAY_USER --password=$BINTRAY_PASSWORD

